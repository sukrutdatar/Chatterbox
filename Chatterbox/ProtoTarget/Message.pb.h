// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Client {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class BeaconMessage;
class Message;
class TestMessage;

enum Message_MsgType {
  Message_MsgType_BeaconMsg = 0,
  Message_MsgType_TestMsg = 1
};
bool Message_MsgType_IsValid(int value);
const Message_MsgType Message_MsgType_MsgType_MIN = Message_MsgType_BeaconMsg;
const Message_MsgType Message_MsgType_MsgType_MAX = Message_MsgType_TestMsg;
const int Message_MsgType_MsgType_ARRAYSIZE = Message_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_MsgType_descriptor();
inline const ::std::string& Message_MsgType_Name(Message_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_MsgType_descriptor(), value);
}
inline bool Message_MsgType_Parse(
    const ::std::string& name, Message_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_MsgType>(
    Message_MsgType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_MsgType MsgType;
  static const MsgType BeaconMsg =
    Message_MsgType_BeaconMsg;
  static const MsgType TestMsg =
    Message_MsgType_TestMsg;
  static inline bool MsgType_IsValid(int value) {
    return Message_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    Message_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    Message_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    Message_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return Message_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return Message_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return Message_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .Client.Message.MsgType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Client::Message_MsgType type() const;
  void set_type(::Client::Message_MsgType value);

  // optional .Client.BeaconMessage bmsg = 4;
  bool has_bmsg() const;
  void clear_bmsg();
  static const int kBmsgFieldNumber = 4;
  const ::Client::BeaconMessage& bmsg() const;
  ::Client::BeaconMessage* mutable_bmsg();
  ::Client::BeaconMessage* release_bmsg();
  void set_allocated_bmsg(::Client::BeaconMessage* bmsg);

  // optional .Client.TestMessage tmsg = 5;
  bool has_tmsg() const;
  void clear_tmsg();
  static const int kTmsgFieldNumber = 5;
  const ::Client::TestMessage& tmsg() const;
  ::Client::TestMessage* mutable_tmsg();
  ::Client::TestMessage* release_tmsg();
  void set_allocated_tmsg(::Client::TestMessage* tmsg);

  // @@protoc_insertion_point(class_scope:Client.Message)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bmsg();
  inline void clear_has_bmsg();
  inline void set_has_tmsg();
  inline void clear_has_tmsg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 id_;
  int type_;
  ::Client::BeaconMessage* bmsg_;
  ::Client::TestMessage* tmsg_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class BeaconMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.BeaconMessage) */ {
 public:
  BeaconMessage();
  virtual ~BeaconMessage();

  BeaconMessage(const BeaconMessage& from);

  inline BeaconMessage& operator=(const BeaconMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeaconMessage& default_instance();

  void Swap(BeaconMessage* other);

  // implements Message ----------------------------------------------

  inline BeaconMessage* New() const { return New(NULL); }

  BeaconMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeaconMessage& from);
  void MergeFrom(const BeaconMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeaconMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Client.BeaconMessage)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool status_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static BeaconMessage* default_instance_;
};
// -------------------------------------------------------------------

class TestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.TestMessage) */ {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  void Swap(TestMessage* other);

  // implements Message ----------------------------------------------

  inline TestMessage* New() const { return New(NULL); }

  TestMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ttl = 1;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 1;
  ::google::protobuf::int32 ttl() const;
  void set_ttl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Client.TestMessage)
 private:
  inline void set_has_ttl();
  inline void clear_has_ttl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ttl_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required int32 id = 1;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Message::id() const {
  // @@protoc_insertion_point(field_get:Client.Message.id)
  return id_;
}
inline void Message::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Client.Message.id)
}

// required string message = 2;
inline bool Message::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:Client.Message.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Message.message)
}
inline void Message::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Message.message)
}
inline void Message::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Message.message)
}
inline ::std::string* Message::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:Client.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:Client.Message.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Client.Message.message)
}

// required .Client.Message.MsgType type = 3;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Client::Message_MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:Client.Message.type)
  return static_cast< ::Client::Message_MsgType >(type_);
}
inline void Message::set_type(::Client::Message_MsgType value) {
  assert(::Client::Message_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Client.Message.type)
}

// optional .Client.BeaconMessage bmsg = 4;
inline bool Message::has_bmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_bmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_bmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_bmsg() {
  if (bmsg_ != NULL) bmsg_->::Client::BeaconMessage::Clear();
  clear_has_bmsg();
}
inline const ::Client::BeaconMessage& Message::bmsg() const {
  // @@protoc_insertion_point(field_get:Client.Message.bmsg)
  return bmsg_ != NULL ? *bmsg_ : *default_instance_->bmsg_;
}
inline ::Client::BeaconMessage* Message::mutable_bmsg() {
  set_has_bmsg();
  if (bmsg_ == NULL) {
    bmsg_ = new ::Client::BeaconMessage;
  }
  // @@protoc_insertion_point(field_mutable:Client.Message.bmsg)
  return bmsg_;
}
inline ::Client::BeaconMessage* Message::release_bmsg() {
  // @@protoc_insertion_point(field_release:Client.Message.bmsg)
  clear_has_bmsg();
  ::Client::BeaconMessage* temp = bmsg_;
  bmsg_ = NULL;
  return temp;
}
inline void Message::set_allocated_bmsg(::Client::BeaconMessage* bmsg) {
  delete bmsg_;
  bmsg_ = bmsg;
  if (bmsg) {
    set_has_bmsg();
  } else {
    clear_has_bmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Message.bmsg)
}

// optional .Client.TestMessage tmsg = 5;
inline bool Message::has_tmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_tmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_tmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_tmsg() {
  if (tmsg_ != NULL) tmsg_->::Client::TestMessage::Clear();
  clear_has_tmsg();
}
inline const ::Client::TestMessage& Message::tmsg() const {
  // @@protoc_insertion_point(field_get:Client.Message.tmsg)
  return tmsg_ != NULL ? *tmsg_ : *default_instance_->tmsg_;
}
inline ::Client::TestMessage* Message::mutable_tmsg() {
  set_has_tmsg();
  if (tmsg_ == NULL) {
    tmsg_ = new ::Client::TestMessage;
  }
  // @@protoc_insertion_point(field_mutable:Client.Message.tmsg)
  return tmsg_;
}
inline ::Client::TestMessage* Message::release_tmsg() {
  // @@protoc_insertion_point(field_release:Client.Message.tmsg)
  clear_has_tmsg();
  ::Client::TestMessage* temp = tmsg_;
  tmsg_ = NULL;
  return temp;
}
inline void Message::set_allocated_tmsg(::Client::TestMessage* tmsg) {
  delete tmsg_;
  tmsg_ = tmsg;
  if (tmsg) {
    set_has_tmsg();
  } else {
    clear_has_tmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Message.tmsg)
}

// -------------------------------------------------------------------

// BeaconMessage

// required bool status = 1;
inline bool BeaconMessage::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeaconMessage::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeaconMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeaconMessage::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool BeaconMessage::status() const {
  // @@protoc_insertion_point(field_get:Client.BeaconMessage.status)
  return status_;
}
inline void BeaconMessage::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Client.BeaconMessage.status)
}

// -------------------------------------------------------------------

// TestMessage

// required int32 ttl = 1;
inline bool TestMessage::has_ttl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_ttl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_ttl() {
  ttl_ = 0;
  clear_has_ttl();
}
inline ::google::protobuf::int32 TestMessage::ttl() const {
  // @@protoc_insertion_point(field_get:Client.TestMessage.ttl)
  return ttl_;
}
inline void TestMessage::set_ttl(::google::protobuf::int32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:Client.TestMessage.ttl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Client::Message_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client::Message_MsgType>() {
  return ::Client::Message_MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
