// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Client {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BeaconMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeaconMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, bmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, tmsg_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  Message_MsgType_descriptor_ = Message_descriptor_->enum_type(0);
  BeaconMessage_descriptor_ = file->message_type(1);
  static const int BeaconMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, status_),
  };
  BeaconMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeaconMessage_descriptor_,
      BeaconMessage::default_instance_,
      BeaconMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeaconMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeaconMessage, _internal_metadata_),
      -1);
  TestMessage_descriptor_ = file->message_type(2);
  static const int TestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, ttl_),
  };
  TestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeaconMessage_descriptor_, &BeaconMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestMessage_descriptor_, &TestMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete BeaconMessage::default_instance_;
  delete BeaconMessage_reflection_;
  delete TestMessage::default_instance_;
  delete TestMessage_reflection_;
}

void protobuf_AddDesc_Message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\006Client\"\274\001\n\007Message\022\n\n\002i"
    "d\030\001 \002(\005\022\017\n\007message\030\002 \002(\t\022%\n\004type\030\003 \002(\0162\027"
    ".Client.Message.MsgType\022#\n\004bmsg\030\004 \001(\0132\025."
    "Client.BeaconMessage\022!\n\004tmsg\030\005 \001(\0132\023.Cli"
    "ent.TestMessage\"%\n\007MsgType\022\r\n\tBeaconMsg\020"
    "\000\022\013\n\007TestMsg\020\001\"\037\n\rBeaconMessage\022\016\n\006statu"
    "s\030\001 \002(\010\"\032\n\013TestMessage\022\013\n\003ttl\030\001 \002(\005", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  BeaconMessage::default_instance_ = new BeaconMessage();
  TestMessage::default_instance_ = new TestMessage();
  Message::default_instance_->InitAsDefaultInstance();
  BeaconMessage::default_instance_->InitAsDefaultInstance();
  TestMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MsgType_descriptor_;
}
bool Message_MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_MsgType Message::BeaconMsg;
const Message_MsgType Message::TestMsg;
const Message_MsgType Message::MsgType_MIN;
const Message_MsgType Message::MsgType_MAX;
const int Message::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kIdFieldNumber;
const int Message::kMessageFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kBmsgFieldNumber;
const int Message::kTmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Client.Message)
}

void Message::InitAsDefaultInstance() {
  bmsg_ = const_cast< ::Client::BeaconMessage*>(&::Client::BeaconMessage::default_instance());
  tmsg_ = const_cast< ::Client::TestMessage*>(&::Client::TestMessage::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Client.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  bmsg_ = NULL;
  tmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Client.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bmsg_;
    delete tmsg_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Client.Message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, type_);
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bmsg()) {
      if (bmsg_ != NULL) bmsg_->::Client::BeaconMessage::Clear();
    }
    if (has_tmsg()) {
      if (tmsg_ != NULL) tmsg_->::Client::TestMessage::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Client.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Client.Message.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Client.Message.MsgType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Client::Message_MsgType_IsValid(value)) {
            set_type(static_cast< ::Client::Message_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bmsg;
        break;
      }

      // optional .Client.BeaconMessage bmsg = 4;
      case 4: {
        if (tag == 34) {
         parse_bmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tmsg;
        break;
      }

      // optional .Client.TestMessage tmsg = 5;
      case 5: {
        if (tag == 42) {
         parse_tmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Client.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Client.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Client.Message)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Client.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // required .Client.Message.MsgType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Client.BeaconMessage bmsg = 4;
  if (has_bmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bmsg_, output);
  }

  // optional .Client.TestMessage tmsg = 5;
  if (has_tmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tmsg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Client.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Client.Message)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Client.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // required .Client.Message.MsgType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Client.BeaconMessage bmsg = 4;
  if (has_bmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bmsg_, false, target);
  }

  // optional .Client.TestMessage tmsg = 5;
  if (has_tmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tmsg_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client.Message)
  return target;
}

int Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Client.Message)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_type()) {
    // required .Client.Message.MsgType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Client.Message)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required .Client.Message.MsgType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional .Client.BeaconMessage bmsg = 4;
    if (has_bmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bmsg_);
    }

    // optional .Client.TestMessage tmsg = 5;
    if (has_tmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tmsg_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Client.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Client.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Client.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Client.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bmsg()) {
      mutable_bmsg()->::Client::BeaconMessage::MergeFrom(from.bmsg());
    }
    if (from.has_tmsg()) {
      mutable_tmsg()->::Client::TestMessage::MergeFrom(from.tmsg());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Client.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_bmsg()) {
    if (!this->bmsg_->IsInitialized()) return false;
  }
  if (has_tmsg()) {
    if (!this->tmsg_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(id_, other->id_);
  message_.Swap(&other->message_);
  std::swap(type_, other->type_);
  std::swap(bmsg_, other->bmsg_);
  std::swap(tmsg_, other->tmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required int32 id = 1;
bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Message::id() const {
  // @@protoc_insertion_point(field_get:Client.Message.id)
  return id_;
}
 void Message::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Client.Message.id)
}

// required string message = 2;
bool Message::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:Client.Message.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Message.message)
}
 void Message::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Message.message)
}
 void Message::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Message.message)
}
 ::std::string* Message::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:Client.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:Client.Message.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Client.Message.message)
}

// required .Client.Message.MsgType type = 3;
bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Client::Message_MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:Client.Message.type)
  return static_cast< ::Client::Message_MsgType >(type_);
}
 void Message::set_type(::Client::Message_MsgType value) {
  assert(::Client::Message_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Client.Message.type)
}

// optional .Client.BeaconMessage bmsg = 4;
bool Message::has_bmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_bmsg() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_bmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_bmsg() {
  if (bmsg_ != NULL) bmsg_->::Client::BeaconMessage::Clear();
  clear_has_bmsg();
}
const ::Client::BeaconMessage& Message::bmsg() const {
  // @@protoc_insertion_point(field_get:Client.Message.bmsg)
  return bmsg_ != NULL ? *bmsg_ : *default_instance_->bmsg_;
}
::Client::BeaconMessage* Message::mutable_bmsg() {
  set_has_bmsg();
  if (bmsg_ == NULL) {
    bmsg_ = new ::Client::BeaconMessage;
  }
  // @@protoc_insertion_point(field_mutable:Client.Message.bmsg)
  return bmsg_;
}
::Client::BeaconMessage* Message::release_bmsg() {
  // @@protoc_insertion_point(field_release:Client.Message.bmsg)
  clear_has_bmsg();
  ::Client::BeaconMessage* temp = bmsg_;
  bmsg_ = NULL;
  return temp;
}
void Message::set_allocated_bmsg(::Client::BeaconMessage* bmsg) {
  delete bmsg_;
  bmsg_ = bmsg;
  if (bmsg) {
    set_has_bmsg();
  } else {
    clear_has_bmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Message.bmsg)
}

// optional .Client.TestMessage tmsg = 5;
bool Message::has_tmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_tmsg() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_tmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_tmsg() {
  if (tmsg_ != NULL) tmsg_->::Client::TestMessage::Clear();
  clear_has_tmsg();
}
const ::Client::TestMessage& Message::tmsg() const {
  // @@protoc_insertion_point(field_get:Client.Message.tmsg)
  return tmsg_ != NULL ? *tmsg_ : *default_instance_->tmsg_;
}
::Client::TestMessage* Message::mutable_tmsg() {
  set_has_tmsg();
  if (tmsg_ == NULL) {
    tmsg_ = new ::Client::TestMessage;
  }
  // @@protoc_insertion_point(field_mutable:Client.Message.tmsg)
  return tmsg_;
}
::Client::TestMessage* Message::release_tmsg() {
  // @@protoc_insertion_point(field_release:Client.Message.tmsg)
  clear_has_tmsg();
  ::Client::TestMessage* temp = tmsg_;
  tmsg_ = NULL;
  return temp;
}
void Message::set_allocated_tmsg(::Client::TestMessage* tmsg) {
  delete tmsg_;
  tmsg_ = tmsg;
  if (tmsg) {
    set_has_tmsg();
  } else {
    clear_has_tmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Message.tmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeaconMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeaconMessage::BeaconMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Client.BeaconMessage)
}

void BeaconMessage::InitAsDefaultInstance() {
}

BeaconMessage::BeaconMessage(const BeaconMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Client.BeaconMessage)
}

void BeaconMessage::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeaconMessage::~BeaconMessage() {
  // @@protoc_insertion_point(destructor:Client.BeaconMessage)
  SharedDtor();
}

void BeaconMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeaconMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeaconMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeaconMessage_descriptor_;
}

const BeaconMessage& BeaconMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

BeaconMessage* BeaconMessage::default_instance_ = NULL;

BeaconMessage* BeaconMessage::New(::google::protobuf::Arena* arena) const {
  BeaconMessage* n = new BeaconMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeaconMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Client.BeaconMessage)
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeaconMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Client.BeaconMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Client.BeaconMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Client.BeaconMessage)
  return false;
#undef DO_
}

void BeaconMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Client.BeaconMessage)
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Client.BeaconMessage)
}

::google::protobuf::uint8* BeaconMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Client.BeaconMessage)
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client.BeaconMessage)
  return target;
}

int BeaconMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Client.BeaconMessage)
  int total_size = 0;

  // required bool status = 1;
  if (has_status()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeaconMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Client.BeaconMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BeaconMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BeaconMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Client.BeaconMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Client.BeaconMessage)
    MergeFrom(*source);
  }
}

void BeaconMessage::MergeFrom(const BeaconMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Client.BeaconMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeaconMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Client.BeaconMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeaconMessage::CopyFrom(const BeaconMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client.BeaconMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BeaconMessage::Swap(BeaconMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeaconMessage::InternalSwap(BeaconMessage* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeaconMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeaconMessage_descriptor_;
  metadata.reflection = BeaconMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeaconMessage

// required bool status = 1;
bool BeaconMessage::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BeaconMessage::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void BeaconMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void BeaconMessage::clear_status() {
  status_ = false;
  clear_has_status();
}
 bool BeaconMessage::status() const {
  // @@protoc_insertion_point(field_get:Client.BeaconMessage.status)
  return status_;
}
 void BeaconMessage::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Client.BeaconMessage.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Client.TestMessage)
}

void TestMessage::InitAsDefaultInstance() {
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Client.TestMessage)
}

void TestMessage::SharedCtor() {
  _cached_size_ = 0;
  ttl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:Client.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New(::google::protobuf::Arena* arena) const {
  TestMessage* n = new TestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Client.TestMessage)
  ttl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Client.TestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ttl = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Client.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Client.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Client.TestMessage)
  // required int32 ttl = 1;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Client.TestMessage)
}

::google::protobuf::uint8* TestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Client.TestMessage)
  // required int32 ttl = 1;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client.TestMessage)
  return target;
}

int TestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Client.TestMessage)
  int total_size = 0;

  // required int32 ttl = 1;
  if (has_ttl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ttl());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Client.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Client.TestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Client.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Client.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Client.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  std::swap(ttl_, other->ttl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMessage

// required int32 ttl = 1;
bool TestMessage::has_ttl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestMessage::set_has_ttl() {
  _has_bits_[0] |= 0x00000001u;
}
void TestMessage::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestMessage::clear_ttl() {
  ttl_ = 0;
  clear_has_ttl();
}
 ::google::protobuf::int32 TestMessage::ttl() const {
  // @@protoc_insertion_point(field_get:Client.TestMessage.ttl)
  return ttl_;
}
 void TestMessage::set_ttl(::google::protobuf::int32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:Client.TestMessage.ttl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Client

// @@protoc_insertion_point(global_scope)
