// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ListUsersCommandResponseMessageProtoBuf.proto

#include "ListUsersCommandResponseMessageProtoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ChatterBoxCore {
namespace Protocols {
class ListUsersCommandResponseMessageProtoBufDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsersCommandResponseMessageProtoBuf> _instance;
} _ListUsersCommandResponseMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterBoxCore
static void InitDefaultsscc_info_ListUsersCommandResponseMessageProtoBuf_ListUsersCommandResponseMessageProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatterBoxCore::Protocols::_ListUsersCommandResponseMessageProtoBuf_default_instance_;
    new (ptr) ::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUsersCommandResponseMessageProtoBuf_ListUsersCommandResponseMessageProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUsersCommandResponseMessageProtoBuf_ListUsersCommandResponseMessageProtoBuf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ListUsersCommandResponseMessageProtoBuf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ListUsersCommandResponseMessageProtoBuf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ListUsersCommandResponseMessageProtoBuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ListUsersCommandResponseMessageProtoBuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf, activeusers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatterBoxCore::Protocols::_ListUsersCommandResponseMessageProtoBuf_default_instance_),
};

const char descriptor_table_protodef_ListUsersCommandResponseMessageProtoBuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-ListUsersCommandResponseMessageProtoBu"
  "f.proto\022\030ChatterBoxCore.Protocols\">\n\'Lis"
  "tUsersCommandResponseMessageProtoBuf\022\023\n\013"
  "activeUsers\030\006 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_sccs[1] = {
  &scc_info_ListUsersCommandResponseMessageProtoBuf_ListUsersCommandResponseMessageProtoBuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_once;
static bool descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto = {
  &descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_initialized, descriptor_table_protodef_ListUsersCommandResponseMessageProtoBuf_2eproto, "ListUsersCommandResponseMessageProtoBuf.proto", 145,
  &descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_once, descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_sccs, descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ListUsersCommandResponseMessageProtoBuf_2eproto::offsets,
  file_level_metadata_ListUsersCommandResponseMessageProtoBuf_2eproto, 1, file_level_enum_descriptors_ListUsersCommandResponseMessageProtoBuf_2eproto, file_level_service_descriptors_ListUsersCommandResponseMessageProtoBuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ListUsersCommandResponseMessageProtoBuf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ListUsersCommandResponseMessageProtoBuf_2eproto), true);
namespace ChatterBoxCore {
namespace Protocols {

// ===================================================================

void ListUsersCommandResponseMessageProtoBuf::InitAsDefaultInstance() {
}
class ListUsersCommandResponseMessageProtoBuf::_Internal {
 public:
};

ListUsersCommandResponseMessageProtoBuf::ListUsersCommandResponseMessageProtoBuf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
}
ListUsersCommandResponseMessageProtoBuf::ListUsersCommandResponseMessageProtoBuf(const ListUsersCommandResponseMessageProtoBuf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activeusers_(from.activeusers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
}

void ListUsersCommandResponseMessageProtoBuf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUsersCommandResponseMessageProtoBuf_ListUsersCommandResponseMessageProtoBuf_2eproto.base);
}

ListUsersCommandResponseMessageProtoBuf::~ListUsersCommandResponseMessageProtoBuf() {
  // @@protoc_insertion_point(destructor:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  SharedDtor();
}

void ListUsersCommandResponseMessageProtoBuf::SharedDtor() {
}

void ListUsersCommandResponseMessageProtoBuf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsersCommandResponseMessageProtoBuf& ListUsersCommandResponseMessageProtoBuf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsersCommandResponseMessageProtoBuf_ListUsersCommandResponseMessageProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void ListUsersCommandResponseMessageProtoBuf::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activeusers_.Clear();
  _internal_metadata_.Clear();
}

const char* ListUsersCommandResponseMessageProtoBuf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string activeUsers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_activeusers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf.activeUsers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsersCommandResponseMessageProtoBuf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string activeUsers = 6;
  for (int i = 0, n = this->_internal_activeusers_size(); i < n; i++) {
    const auto& s = this->_internal_activeusers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf.activeUsers");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  return target;
}

size_t ListUsersCommandResponseMessageProtoBuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string activeUsers = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(activeusers_.size());
  for (int i = 0, n = activeusers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      activeusers_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsersCommandResponseMessageProtoBuf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsersCommandResponseMessageProtoBuf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsersCommandResponseMessageProtoBuf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
    MergeFrom(*source);
  }
}

void ListUsersCommandResponseMessageProtoBuf::MergeFrom(const ListUsersCommandResponseMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activeusers_.MergeFrom(from.activeusers_);
}

void ListUsersCommandResponseMessageProtoBuf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsersCommandResponseMessageProtoBuf::CopyFrom(const ListUsersCommandResponseMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatterBoxCore.Protocols.ListUsersCommandResponseMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsersCommandResponseMessageProtoBuf::IsInitialized() const {
  return true;
}

void ListUsersCommandResponseMessageProtoBuf::InternalSwap(ListUsersCommandResponseMessageProtoBuf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activeusers_.InternalSwap(&other->activeusers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsersCommandResponseMessageProtoBuf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocols
}  // namespace ChatterBoxCore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf* Arena::CreateMaybeMessage< ::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf >(Arena* arena) {
  return Arena::CreateInternal< ::ChatterBoxCore::Protocols::ListUsersCommandResponseMessageProtoBuf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
