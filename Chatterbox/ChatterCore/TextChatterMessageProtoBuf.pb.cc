// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TextChatterMessageProtoBuf.proto

#include "TextChatterMessageProtoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ChatterCore {
namespace Protocols {
class TextChatterMessageProtoBufDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextChatterMessageProtoBuf> _instance;
} _TextChatterMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterCore
static void InitDefaultsscc_info_TextChatterMessageProtoBuf_TextChatterMessageProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatterCore::Protocols::_TextChatterMessageProtoBuf_default_instance_;
    new (ptr) ::ChatterCore::Protocols::TextChatterMessageProtoBuf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatterCore::Protocols::TextChatterMessageProtoBuf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextChatterMessageProtoBuf_TextChatterMessageProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextChatterMessageProtoBuf_TextChatterMessageProtoBuf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TextChatterMessageProtoBuf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TextChatterMessageProtoBuf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TextChatterMessageProtoBuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TextChatterMessageProtoBuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatterCore::Protocols::TextChatterMessageProtoBuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatterCore::Protocols::TextChatterMessageProtoBuf, textmessage_),
  PROTOBUF_FIELD_OFFSET(::ChatterCore::Protocols::TextChatterMessageProtoBuf, chatwithuser_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatterCore::Protocols::TextChatterMessageProtoBuf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatterCore::Protocols::_TextChatterMessageProtoBuf_default_instance_),
};

const char descriptor_table_protodef_TextChatterMessageProtoBuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n TextChatterMessageProtoBuf.proto\022\025Chat"
  "terCore.Protocols\"G\n\032TextChatterMessageP"
  "rotoBuf\022\023\n\013textMessage\030\004 \001(\t\022\024\n\014chatWith"
  "User\030\005 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TextChatterMessageProtoBuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TextChatterMessageProtoBuf_2eproto_sccs[1] = {
  &scc_info_TextChatterMessageProtoBuf_TextChatterMessageProtoBuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TextChatterMessageProtoBuf_2eproto_once;
static bool descriptor_table_TextChatterMessageProtoBuf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TextChatterMessageProtoBuf_2eproto = {
  &descriptor_table_TextChatterMessageProtoBuf_2eproto_initialized, descriptor_table_protodef_TextChatterMessageProtoBuf_2eproto, "TextChatterMessageProtoBuf.proto", 138,
  &descriptor_table_TextChatterMessageProtoBuf_2eproto_once, descriptor_table_TextChatterMessageProtoBuf_2eproto_sccs, descriptor_table_TextChatterMessageProtoBuf_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_TextChatterMessageProtoBuf_2eproto::offsets,
  file_level_metadata_TextChatterMessageProtoBuf_2eproto, 1, file_level_enum_descriptors_TextChatterMessageProtoBuf_2eproto, file_level_service_descriptors_TextChatterMessageProtoBuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TextChatterMessageProtoBuf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TextChatterMessageProtoBuf_2eproto), true);
namespace ChatterCore {
namespace Protocols {

// ===================================================================

void TextChatterMessageProtoBuf::InitAsDefaultInstance() {
}
class TextChatterMessageProtoBuf::_Internal {
 public:
};

TextChatterMessageProtoBuf::TextChatterMessageProtoBuf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatterCore.Protocols.TextChatterMessageProtoBuf)
}
TextChatterMessageProtoBuf::TextChatterMessageProtoBuf(const TextChatterMessageProtoBuf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  textmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_textmessage().empty()) {
    textmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textmessage_);
  }
  chatwithuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatwithuser().empty()) {
    chatwithuser_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chatwithuser_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatterCore.Protocols.TextChatterMessageProtoBuf)
}

void TextChatterMessageProtoBuf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextChatterMessageProtoBuf_TextChatterMessageProtoBuf_2eproto.base);
  textmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatwithuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextChatterMessageProtoBuf::~TextChatterMessageProtoBuf() {
  // @@protoc_insertion_point(destructor:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  SharedDtor();
}

void TextChatterMessageProtoBuf::SharedDtor() {
  textmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatwithuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextChatterMessageProtoBuf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextChatterMessageProtoBuf& TextChatterMessageProtoBuf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextChatterMessageProtoBuf_TextChatterMessageProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void TextChatterMessageProtoBuf::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatwithuser_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TextChatterMessageProtoBuf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string textMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_textmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatterCore.Protocols.TextChatterMessageProtoBuf.textMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chatWithUser = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_chatwithuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatterCore.Protocols.TextChatterMessageProtoBuf.chatWithUser"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextChatterMessageProtoBuf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string textMessage = 4;
  if (this->textmessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textmessage().data(), static_cast<int>(this->_internal_textmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatterCore.Protocols.TextChatterMessageProtoBuf.textMessage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_textmessage(), target);
  }

  // string chatWithUser = 5;
  if (this->chatwithuser().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatwithuser().data(), static_cast<int>(this->_internal_chatwithuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatterCore.Protocols.TextChatterMessageProtoBuf.chatWithUser");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_chatwithuser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  return target;
}

size_t TextChatterMessageProtoBuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string textMessage = 4;
  if (this->textmessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_textmessage());
  }

  // string chatWithUser = 5;
  if (this->chatwithuser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatwithuser());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextChatterMessageProtoBuf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  const TextChatterMessageProtoBuf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextChatterMessageProtoBuf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatterCore.Protocols.TextChatterMessageProtoBuf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatterCore.Protocols.TextChatterMessageProtoBuf)
    MergeFrom(*source);
  }
}

void TextChatterMessageProtoBuf::MergeFrom(const TextChatterMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.textmessage().size() > 0) {

    textmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textmessage_);
  }
  if (from.chatwithuser().size() > 0) {

    chatwithuser_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chatwithuser_);
  }
}

void TextChatterMessageProtoBuf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextChatterMessageProtoBuf::CopyFrom(const TextChatterMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatterCore.Protocols.TextChatterMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextChatterMessageProtoBuf::IsInitialized() const {
  return true;
}

void TextChatterMessageProtoBuf::InternalSwap(TextChatterMessageProtoBuf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  textmessage_.Swap(&other->textmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chatwithuser_.Swap(&other->chatwithuser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextChatterMessageProtoBuf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocols
}  // namespace ChatterCore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatterCore::Protocols::TextChatterMessageProtoBuf* Arena::CreateMaybeMessage< ::ChatterCore::Protocols::TextChatterMessageProtoBuf >(Arena* arena) {
  return Arena::CreateInternal< ::ChatterCore::Protocols::TextChatterMessageProtoBuf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
