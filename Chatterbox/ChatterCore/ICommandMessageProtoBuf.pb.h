// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ICommandMessageProtoBuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ICommandMessageProtoBuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ICommandMessageProtoBuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ChatCommandMessageProtoBuf.pb.h"
#include "ListUsersCommandMessageProtoBuf.pb.h"
#include "LoginCommandMessageProtoBuf.pb.h"
#include "LogoutCommandMessageProtoBuf.pb.h"
#include "RegisterCommandMessageProtoBuf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ICommandMessageProtoBuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ICommandMessageProtoBuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ICommandMessageProtoBuf_2eproto;
namespace ChatterBoxCore {
namespace Protocols {
class ICommandMessageProtoBuf;
class ICommandMessageProtoBufDefaultTypeInternal;
extern ICommandMessageProtoBufDefaultTypeInternal _ICommandMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterBoxCore
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf* Arena::CreateMaybeMessage<::ChatterBoxCore::Protocols::ICommandMessageProtoBuf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatterBoxCore {
namespace Protocols {

enum ICommandMessageProtoBuf_CommandTypeProtoBuf : int {
  ICommandMessageProtoBuf_CommandTypeProtoBuf_LoginCommand = 0,
  ICommandMessageProtoBuf_CommandTypeProtoBuf_LogoutCommand = 1,
  ICommandMessageProtoBuf_CommandTypeProtoBuf_ListUsersCommand = 2,
  ICommandMessageProtoBuf_CommandTypeProtoBuf_RegisterCommand = 3,
  ICommandMessageProtoBuf_CommandTypeProtoBuf_ChatCommand = 4,
  ICommandMessageProtoBuf_CommandTypeProtoBuf_ICommandMessageProtoBuf_CommandTypeProtoBuf_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ICommandMessageProtoBuf_CommandTypeProtoBuf_ICommandMessageProtoBuf_CommandTypeProtoBuf_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ICommandMessageProtoBuf_CommandTypeProtoBuf_IsValid(int value);
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_MIN = ICommandMessageProtoBuf_CommandTypeProtoBuf_LoginCommand;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_MAX = ICommandMessageProtoBuf_CommandTypeProtoBuf_ChatCommand;
constexpr int ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_ARRAYSIZE = ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ICommandMessageProtoBuf_CommandTypeProtoBuf_descriptor();
template<typename T>
inline const std::string& ICommandMessageProtoBuf_CommandTypeProtoBuf_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ICommandMessageProtoBuf_CommandTypeProtoBuf>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ICommandMessageProtoBuf_CommandTypeProtoBuf_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ICommandMessageProtoBuf_CommandTypeProtoBuf_descriptor(), enum_t_value);
}
inline bool ICommandMessageProtoBuf_CommandTypeProtoBuf_Parse(
    const std::string& name, ICommandMessageProtoBuf_CommandTypeProtoBuf* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ICommandMessageProtoBuf_CommandTypeProtoBuf>(
    ICommandMessageProtoBuf_CommandTypeProtoBuf_descriptor(), name, value);
}
// ===================================================================

class ICommandMessageProtoBuf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatterBoxCore.Protocols.ICommandMessageProtoBuf) */ {
 public:
  ICommandMessageProtoBuf();
  virtual ~ICommandMessageProtoBuf();

  ICommandMessageProtoBuf(const ICommandMessageProtoBuf& from);
  ICommandMessageProtoBuf(ICommandMessageProtoBuf&& from) noexcept
    : ICommandMessageProtoBuf() {
    *this = ::std::move(from);
  }

  inline ICommandMessageProtoBuf& operator=(const ICommandMessageProtoBuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ICommandMessageProtoBuf& operator=(ICommandMessageProtoBuf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ICommandMessageProtoBuf& default_instance();

  enum CommandDataCase {
    kRegisterCommandMessagePB = 9,
    kLoginCommandMessagePB = 10,
    kLogoutCommandMessagePB = 11,
    kChatCommandMessagePB = 12,
    kListUsersCommandMessagePB = 13,
    COMMANDDATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ICommandMessageProtoBuf* internal_default_instance() {
    return reinterpret_cast<const ICommandMessageProtoBuf*>(
               &_ICommandMessageProtoBuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ICommandMessageProtoBuf& a, ICommandMessageProtoBuf& b) {
    a.Swap(&b);
  }
  inline void Swap(ICommandMessageProtoBuf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ICommandMessageProtoBuf* New() const final {
    return CreateMaybeMessage<ICommandMessageProtoBuf>(nullptr);
  }

  ICommandMessageProtoBuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ICommandMessageProtoBuf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ICommandMessageProtoBuf& from);
  void MergeFrom(const ICommandMessageProtoBuf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ICommandMessageProtoBuf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatterBoxCore.Protocols.ICommandMessageProtoBuf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ICommandMessageProtoBuf_2eproto);
    return ::descriptor_table_ICommandMessageProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ICommandMessageProtoBuf_CommandTypeProtoBuf CommandTypeProtoBuf;
  static constexpr CommandTypeProtoBuf LoginCommand =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_LoginCommand;
  static constexpr CommandTypeProtoBuf LogoutCommand =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_LogoutCommand;
  static constexpr CommandTypeProtoBuf ListUsersCommand =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_ListUsersCommand;
  static constexpr CommandTypeProtoBuf RegisterCommand =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_RegisterCommand;
  static constexpr CommandTypeProtoBuf ChatCommand =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_ChatCommand;
  static inline bool CommandTypeProtoBuf_IsValid(int value) {
    return ICommandMessageProtoBuf_CommandTypeProtoBuf_IsValid(value);
  }
  static constexpr CommandTypeProtoBuf CommandTypeProtoBuf_MIN =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_MIN;
  static constexpr CommandTypeProtoBuf CommandTypeProtoBuf_MAX =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_MAX;
  static constexpr int CommandTypeProtoBuf_ARRAYSIZE =
    ICommandMessageProtoBuf_CommandTypeProtoBuf_CommandTypeProtoBuf_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandTypeProtoBuf_descriptor() {
    return ICommandMessageProtoBuf_CommandTypeProtoBuf_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandTypeProtoBuf_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandTypeProtoBuf>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandTypeProtoBuf_Name.");
    return ICommandMessageProtoBuf_CommandTypeProtoBuf_Name(enum_t_value);
  }
  static inline bool CommandTypeProtoBuf_Parse(const std::string& name,
      CommandTypeProtoBuf* value) {
    return ICommandMessageProtoBuf_CommandTypeProtoBuf_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandTypeFieldNumber = 3,
    kRegisterCommandMessagePBFieldNumber = 9,
    kLoginCommandMessagePBFieldNumber = 10,
    kLogoutCommandMessagePBFieldNumber = 11,
    kChatCommandMessagePBFieldNumber = 12,
    kListUsersCommandMessagePBFieldNumber = 13,
  };
  // .ChatterBoxCore.Protocols.ICommandMessageProtoBuf.CommandTypeProtoBuf commandType = 3;
  void clear_commandtype();
  ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf commandtype() const;
  void set_commandtype(::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf value);
  private:
  ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf _internal_commandtype() const;
  void _internal_set_commandtype(::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf value);
  public:

  // .ChatterBoxCore.Protocols.RegisterCommandMessageProtoBuf RegisterCommandMessagePB = 9;
  bool has_registercommandmessagepb() const;
  private:
  bool _internal_has_registercommandmessagepb() const;
  public:
  void clear_registercommandmessagepb();
  const ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf& registercommandmessagepb() const;
  ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* release_registercommandmessagepb();
  ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* mutable_registercommandmessagepb();
  void set_allocated_registercommandmessagepb(::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* registercommandmessagepb);
  private:
  const ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf& _internal_registercommandmessagepb() const;
  ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* _internal_mutable_registercommandmessagepb();
  public:

  // .ChatterBoxCore.Protocols.LoginCommandMessageProtoBuf LoginCommandMessagePB = 10;
  bool has_logincommandmessagepb() const;
  private:
  bool _internal_has_logincommandmessagepb() const;
  public:
  void clear_logincommandmessagepb();
  const ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf& logincommandmessagepb() const;
  ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* release_logincommandmessagepb();
  ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* mutable_logincommandmessagepb();
  void set_allocated_logincommandmessagepb(::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* logincommandmessagepb);
  private:
  const ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf& _internal_logincommandmessagepb() const;
  ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* _internal_mutable_logincommandmessagepb();
  public:

  // .ChatterBoxCore.Protocols.LogoutCommandMessageProtoBuf LogoutCommandMessagePB = 11;
  bool has_logoutcommandmessagepb() const;
  private:
  bool _internal_has_logoutcommandmessagepb() const;
  public:
  void clear_logoutcommandmessagepb();
  const ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf& logoutcommandmessagepb() const;
  ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* release_logoutcommandmessagepb();
  ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* mutable_logoutcommandmessagepb();
  void set_allocated_logoutcommandmessagepb(::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* logoutcommandmessagepb);
  private:
  const ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf& _internal_logoutcommandmessagepb() const;
  ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* _internal_mutable_logoutcommandmessagepb();
  public:

  // .ChatterBoxCore.Protocols.ChatCommandMessageProtoBuf ChatCommandMessagePB = 12;
  bool has_chatcommandmessagepb() const;
  private:
  bool _internal_has_chatcommandmessagepb() const;
  public:
  void clear_chatcommandmessagepb();
  const ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf& chatcommandmessagepb() const;
  ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* release_chatcommandmessagepb();
  ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* mutable_chatcommandmessagepb();
  void set_allocated_chatcommandmessagepb(::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* chatcommandmessagepb);
  private:
  const ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf& _internal_chatcommandmessagepb() const;
  ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* _internal_mutable_chatcommandmessagepb();
  public:

  // .ChatterBoxCore.Protocols.ListUsersCommandMessageProtoBuf ListUsersCommandMessagePB = 13;
  bool has_listuserscommandmessagepb() const;
  private:
  bool _internal_has_listuserscommandmessagepb() const;
  public:
  void clear_listuserscommandmessagepb();
  const ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf& listuserscommandmessagepb() const;
  ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* release_listuserscommandmessagepb();
  ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* mutable_listuserscommandmessagepb();
  void set_allocated_listuserscommandmessagepb(::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* listuserscommandmessagepb);
  private:
  const ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf& _internal_listuserscommandmessagepb() const;
  ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* _internal_mutable_listuserscommandmessagepb();
  public:

  void clear_CommandData();
  CommandDataCase CommandData_case() const;
  // @@protoc_insertion_point(class_scope:ChatterBoxCore.Protocols.ICommandMessageProtoBuf)
 private:
  class _Internal;
  void set_has_registercommandmessagepb();
  void set_has_logincommandmessagepb();
  void set_has_logoutcommandmessagepb();
  void set_has_chatcommandmessagepb();
  void set_has_listuserscommandmessagepb();

  inline bool has_CommandData() const;
  inline void clear_has_CommandData();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int commandtype_;
  union CommandDataUnion {
    CommandDataUnion() {}
    ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* registercommandmessagepb_;
    ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* logincommandmessagepb_;
    ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* logoutcommandmessagepb_;
    ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* chatcommandmessagepb_;
    ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* listuserscommandmessagepb_;
  } CommandData_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ICommandMessageProtoBuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ICommandMessageProtoBuf

// .ChatterBoxCore.Protocols.ICommandMessageProtoBuf.CommandTypeProtoBuf commandType = 3;
inline void ICommandMessageProtoBuf::clear_commandtype() {
  commandtype_ = 0;
}
inline ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::_internal_commandtype() const {
  return static_cast< ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf >(commandtype_);
}
inline ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::commandtype() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.commandType)
  return _internal_commandtype();
}
inline void ICommandMessageProtoBuf::_internal_set_commandtype(::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf value) {
  
  commandtype_ = value;
}
inline void ICommandMessageProtoBuf::set_commandtype(::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf value) {
  _internal_set_commandtype(value);
  // @@protoc_insertion_point(field_set:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.commandType)
}

// .ChatterBoxCore.Protocols.RegisterCommandMessageProtoBuf RegisterCommandMessagePB = 9;
inline bool ICommandMessageProtoBuf::_internal_has_registercommandmessagepb() const {
  return CommandData_case() == kRegisterCommandMessagePB;
}
inline bool ICommandMessageProtoBuf::has_registercommandmessagepb() const {
  return _internal_has_registercommandmessagepb();
}
inline void ICommandMessageProtoBuf::set_has_registercommandmessagepb() {
  _oneof_case_[0] = kRegisterCommandMessagePB;
}
inline ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* ICommandMessageProtoBuf::release_registercommandmessagepb() {
  // @@protoc_insertion_point(field_release:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.RegisterCommandMessagePB)
  if (_internal_has_registercommandmessagepb()) {
    clear_has_CommandData();
      ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* temp = CommandData_.registercommandmessagepb_;
    CommandData_.registercommandmessagepb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf& ICommandMessageProtoBuf::_internal_registercommandmessagepb() const {
  return _internal_has_registercommandmessagepb()
      ? *CommandData_.registercommandmessagepb_
      : *reinterpret_cast< ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf*>(&::ChatterBoxCore::Protocols::_RegisterCommandMessageProtoBuf_default_instance_);
}
inline const ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf& ICommandMessageProtoBuf::registercommandmessagepb() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.RegisterCommandMessagePB)
  return _internal_registercommandmessagepb();
}
inline ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* ICommandMessageProtoBuf::_internal_mutable_registercommandmessagepb() {
  if (!_internal_has_registercommandmessagepb()) {
    clear_CommandData();
    set_has_registercommandmessagepb();
    CommandData_.registercommandmessagepb_ = CreateMaybeMessage< ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf >(
        GetArenaNoVirtual());
  }
  return CommandData_.registercommandmessagepb_;
}
inline ::ChatterBoxCore::Protocols::RegisterCommandMessageProtoBuf* ICommandMessageProtoBuf::mutable_registercommandmessagepb() {
  // @@protoc_insertion_point(field_mutable:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.RegisterCommandMessagePB)
  return _internal_mutable_registercommandmessagepb();
}

// .ChatterBoxCore.Protocols.LoginCommandMessageProtoBuf LoginCommandMessagePB = 10;
inline bool ICommandMessageProtoBuf::_internal_has_logincommandmessagepb() const {
  return CommandData_case() == kLoginCommandMessagePB;
}
inline bool ICommandMessageProtoBuf::has_logincommandmessagepb() const {
  return _internal_has_logincommandmessagepb();
}
inline void ICommandMessageProtoBuf::set_has_logincommandmessagepb() {
  _oneof_case_[0] = kLoginCommandMessagePB;
}
inline ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* ICommandMessageProtoBuf::release_logincommandmessagepb() {
  // @@protoc_insertion_point(field_release:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.LoginCommandMessagePB)
  if (_internal_has_logincommandmessagepb()) {
    clear_has_CommandData();
      ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* temp = CommandData_.logincommandmessagepb_;
    CommandData_.logincommandmessagepb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf& ICommandMessageProtoBuf::_internal_logincommandmessagepb() const {
  return _internal_has_logincommandmessagepb()
      ? *CommandData_.logincommandmessagepb_
      : *reinterpret_cast< ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf*>(&::ChatterBoxCore::Protocols::_LoginCommandMessageProtoBuf_default_instance_);
}
inline const ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf& ICommandMessageProtoBuf::logincommandmessagepb() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.LoginCommandMessagePB)
  return _internal_logincommandmessagepb();
}
inline ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* ICommandMessageProtoBuf::_internal_mutable_logincommandmessagepb() {
  if (!_internal_has_logincommandmessagepb()) {
    clear_CommandData();
    set_has_logincommandmessagepb();
    CommandData_.logincommandmessagepb_ = CreateMaybeMessage< ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf >(
        GetArenaNoVirtual());
  }
  return CommandData_.logincommandmessagepb_;
}
inline ::ChatterBoxCore::Protocols::LoginCommandMessageProtoBuf* ICommandMessageProtoBuf::mutable_logincommandmessagepb() {
  // @@protoc_insertion_point(field_mutable:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.LoginCommandMessagePB)
  return _internal_mutable_logincommandmessagepb();
}

// .ChatterBoxCore.Protocols.LogoutCommandMessageProtoBuf LogoutCommandMessagePB = 11;
inline bool ICommandMessageProtoBuf::_internal_has_logoutcommandmessagepb() const {
  return CommandData_case() == kLogoutCommandMessagePB;
}
inline bool ICommandMessageProtoBuf::has_logoutcommandmessagepb() const {
  return _internal_has_logoutcommandmessagepb();
}
inline void ICommandMessageProtoBuf::set_has_logoutcommandmessagepb() {
  _oneof_case_[0] = kLogoutCommandMessagePB;
}
inline ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* ICommandMessageProtoBuf::release_logoutcommandmessagepb() {
  // @@protoc_insertion_point(field_release:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.LogoutCommandMessagePB)
  if (_internal_has_logoutcommandmessagepb()) {
    clear_has_CommandData();
      ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* temp = CommandData_.logoutcommandmessagepb_;
    CommandData_.logoutcommandmessagepb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf& ICommandMessageProtoBuf::_internal_logoutcommandmessagepb() const {
  return _internal_has_logoutcommandmessagepb()
      ? *CommandData_.logoutcommandmessagepb_
      : *reinterpret_cast< ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf*>(&::ChatterBoxCore::Protocols::_LogoutCommandMessageProtoBuf_default_instance_);
}
inline const ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf& ICommandMessageProtoBuf::logoutcommandmessagepb() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.LogoutCommandMessagePB)
  return _internal_logoutcommandmessagepb();
}
inline ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* ICommandMessageProtoBuf::_internal_mutable_logoutcommandmessagepb() {
  if (!_internal_has_logoutcommandmessagepb()) {
    clear_CommandData();
    set_has_logoutcommandmessagepb();
    CommandData_.logoutcommandmessagepb_ = CreateMaybeMessage< ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf >(
        GetArenaNoVirtual());
  }
  return CommandData_.logoutcommandmessagepb_;
}
inline ::ChatterBoxCore::Protocols::LogoutCommandMessageProtoBuf* ICommandMessageProtoBuf::mutable_logoutcommandmessagepb() {
  // @@protoc_insertion_point(field_mutable:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.LogoutCommandMessagePB)
  return _internal_mutable_logoutcommandmessagepb();
}

// .ChatterBoxCore.Protocols.ChatCommandMessageProtoBuf ChatCommandMessagePB = 12;
inline bool ICommandMessageProtoBuf::_internal_has_chatcommandmessagepb() const {
  return CommandData_case() == kChatCommandMessagePB;
}
inline bool ICommandMessageProtoBuf::has_chatcommandmessagepb() const {
  return _internal_has_chatcommandmessagepb();
}
inline void ICommandMessageProtoBuf::set_has_chatcommandmessagepb() {
  _oneof_case_[0] = kChatCommandMessagePB;
}
inline ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* ICommandMessageProtoBuf::release_chatcommandmessagepb() {
  // @@protoc_insertion_point(field_release:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.ChatCommandMessagePB)
  if (_internal_has_chatcommandmessagepb()) {
    clear_has_CommandData();
      ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* temp = CommandData_.chatcommandmessagepb_;
    CommandData_.chatcommandmessagepb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf& ICommandMessageProtoBuf::_internal_chatcommandmessagepb() const {
  return _internal_has_chatcommandmessagepb()
      ? *CommandData_.chatcommandmessagepb_
      : *reinterpret_cast< ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf*>(&::ChatterBoxCore::Protocols::_ChatCommandMessageProtoBuf_default_instance_);
}
inline const ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf& ICommandMessageProtoBuf::chatcommandmessagepb() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.ChatCommandMessagePB)
  return _internal_chatcommandmessagepb();
}
inline ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* ICommandMessageProtoBuf::_internal_mutable_chatcommandmessagepb() {
  if (!_internal_has_chatcommandmessagepb()) {
    clear_CommandData();
    set_has_chatcommandmessagepb();
    CommandData_.chatcommandmessagepb_ = CreateMaybeMessage< ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf >(
        GetArenaNoVirtual());
  }
  return CommandData_.chatcommandmessagepb_;
}
inline ::ChatterBoxCore::Protocols::ChatCommandMessageProtoBuf* ICommandMessageProtoBuf::mutable_chatcommandmessagepb() {
  // @@protoc_insertion_point(field_mutable:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.ChatCommandMessagePB)
  return _internal_mutable_chatcommandmessagepb();
}

// .ChatterBoxCore.Protocols.ListUsersCommandMessageProtoBuf ListUsersCommandMessagePB = 13;
inline bool ICommandMessageProtoBuf::_internal_has_listuserscommandmessagepb() const {
  return CommandData_case() == kListUsersCommandMessagePB;
}
inline bool ICommandMessageProtoBuf::has_listuserscommandmessagepb() const {
  return _internal_has_listuserscommandmessagepb();
}
inline void ICommandMessageProtoBuf::set_has_listuserscommandmessagepb() {
  _oneof_case_[0] = kListUsersCommandMessagePB;
}
inline ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* ICommandMessageProtoBuf::release_listuserscommandmessagepb() {
  // @@protoc_insertion_point(field_release:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.ListUsersCommandMessagePB)
  if (_internal_has_listuserscommandmessagepb()) {
    clear_has_CommandData();
      ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* temp = CommandData_.listuserscommandmessagepb_;
    CommandData_.listuserscommandmessagepb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf& ICommandMessageProtoBuf::_internal_listuserscommandmessagepb() const {
  return _internal_has_listuserscommandmessagepb()
      ? *CommandData_.listuserscommandmessagepb_
      : *reinterpret_cast< ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf*>(&::ChatterBoxCore::Protocols::_ListUsersCommandMessageProtoBuf_default_instance_);
}
inline const ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf& ICommandMessageProtoBuf::listuserscommandmessagepb() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.ListUsersCommandMessagePB)
  return _internal_listuserscommandmessagepb();
}
inline ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* ICommandMessageProtoBuf::_internal_mutable_listuserscommandmessagepb() {
  if (!_internal_has_listuserscommandmessagepb()) {
    clear_CommandData();
    set_has_listuserscommandmessagepb();
    CommandData_.listuserscommandmessagepb_ = CreateMaybeMessage< ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf >(
        GetArenaNoVirtual());
  }
  return CommandData_.listuserscommandmessagepb_;
}
inline ::ChatterBoxCore::Protocols::ListUsersCommandMessageProtoBuf* ICommandMessageProtoBuf::mutable_listuserscommandmessagepb() {
  // @@protoc_insertion_point(field_mutable:ChatterBoxCore.Protocols.ICommandMessageProtoBuf.ListUsersCommandMessagePB)
  return _internal_mutable_listuserscommandmessagepb();
}

inline bool ICommandMessageProtoBuf::has_CommandData() const {
  return CommandData_case() != COMMANDDATA_NOT_SET;
}
inline void ICommandMessageProtoBuf::clear_has_CommandData() {
  _oneof_case_[0] = COMMANDDATA_NOT_SET;
}
inline ICommandMessageProtoBuf::CommandDataCase ICommandMessageProtoBuf::CommandData_case() const {
  return ICommandMessageProtoBuf::CommandDataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocols
}  // namespace ChatterBoxCore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf>() {
  return ::ChatterBoxCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ICommandMessageProtoBuf_2eproto
