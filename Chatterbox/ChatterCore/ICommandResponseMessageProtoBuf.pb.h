// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ICommandResponseMessageProtoBuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ICommandResponseMessageProtoBuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ICommandResponseMessageProtoBuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ICommandResponseMessageProtoBuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ICommandResponseMessageProtoBuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ICommandResponseMessageProtoBuf_2eproto;
namespace ChatterCore {
namespace Protocols {
class ICommandResponseMessageProtoBuf;
class ICommandResponseMessageProtoBufDefaultTypeInternal;
extern ICommandResponseMessageProtoBufDefaultTypeInternal _ICommandResponseMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterCore
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf* Arena::CreateMaybeMessage<::ChatterCore::Protocols::ICommandResponseMessageProtoBuf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatterCore {
namespace Protocols {

enum ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf : int {
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_LoginCommandResponse = 0,
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_RegisterCommandResponse = 1,
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ChatCommandResponse = 2,
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_LogoutCommandResponse = 3,
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ListUsersCommandResponse = 4,
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_IsValid(int value);
constexpr ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_MIN = ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_LoginCommandResponse;
constexpr ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_MAX = ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ListUsersCommandResponse;
constexpr int ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_ARRAYSIZE = ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_descriptor();
template<typename T>
inline const std::string& ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_descriptor(), enum_t_value);
}
inline bool ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_Parse(
    const std::string& name, ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf>(
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_descriptor(), name, value);
}
// ===================================================================

class ICommandResponseMessageProtoBuf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatterCore.Protocols.ICommandResponseMessageProtoBuf) */ {
 public:
  ICommandResponseMessageProtoBuf();
  virtual ~ICommandResponseMessageProtoBuf();

  ICommandResponseMessageProtoBuf(const ICommandResponseMessageProtoBuf& from);
  ICommandResponseMessageProtoBuf(ICommandResponseMessageProtoBuf&& from) noexcept
    : ICommandResponseMessageProtoBuf() {
    *this = ::std::move(from);
  }

  inline ICommandResponseMessageProtoBuf& operator=(const ICommandResponseMessageProtoBuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ICommandResponseMessageProtoBuf& operator=(ICommandResponseMessageProtoBuf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ICommandResponseMessageProtoBuf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ICommandResponseMessageProtoBuf* internal_default_instance() {
    return reinterpret_cast<const ICommandResponseMessageProtoBuf*>(
               &_ICommandResponseMessageProtoBuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ICommandResponseMessageProtoBuf& a, ICommandResponseMessageProtoBuf& b) {
    a.Swap(&b);
  }
  inline void Swap(ICommandResponseMessageProtoBuf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ICommandResponseMessageProtoBuf* New() const final {
    return CreateMaybeMessage<ICommandResponseMessageProtoBuf>(nullptr);
  }

  ICommandResponseMessageProtoBuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ICommandResponseMessageProtoBuf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ICommandResponseMessageProtoBuf& from);
  void MergeFrom(const ICommandResponseMessageProtoBuf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ICommandResponseMessageProtoBuf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatterCore.Protocols.ICommandResponseMessageProtoBuf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ICommandResponseMessageProtoBuf_2eproto);
    return ::descriptor_table_ICommandResponseMessageProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf CommandResponseTypeProtoBuf;
  static constexpr CommandResponseTypeProtoBuf LoginCommandResponse =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_LoginCommandResponse;
  static constexpr CommandResponseTypeProtoBuf RegisterCommandResponse =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_RegisterCommandResponse;
  static constexpr CommandResponseTypeProtoBuf ChatCommandResponse =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ChatCommandResponse;
  static constexpr CommandResponseTypeProtoBuf LogoutCommandResponse =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_LogoutCommandResponse;
  static constexpr CommandResponseTypeProtoBuf ListUsersCommandResponse =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_ListUsersCommandResponse;
  static inline bool CommandResponseTypeProtoBuf_IsValid(int value) {
    return ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_IsValid(value);
  }
  static constexpr CommandResponseTypeProtoBuf CommandResponseTypeProtoBuf_MIN =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_MIN;
  static constexpr CommandResponseTypeProtoBuf CommandResponseTypeProtoBuf_MAX =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_MAX;
  static constexpr int CommandResponseTypeProtoBuf_ARRAYSIZE =
    ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_CommandResponseTypeProtoBuf_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandResponseTypeProtoBuf_descriptor() {
    return ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandResponseTypeProtoBuf_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandResponseTypeProtoBuf>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandResponseTypeProtoBuf_Name.");
    return ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_Name(enum_t_value);
  }
  static inline bool CommandResponseTypeProtoBuf_Parse(const std::string& name,
      CommandResponseTypeProtoBuf* value) {
    return ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandResponseTypeFieldNumber = 3,
  };
  // .ChatterCore.Protocols.ICommandResponseMessageProtoBuf.CommandResponseTypeProtoBuf commandResponseType = 3;
  void clear_commandresponsetype();
  ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf commandresponsetype() const;
  void set_commandresponsetype(::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf value);
  private:
  ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf _internal_commandresponsetype() const;
  void _internal_set_commandresponsetype(::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf value);
  public:

  // @@protoc_insertion_point(class_scope:ChatterCore.Protocols.ICommandResponseMessageProtoBuf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int commandresponsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ICommandResponseMessageProtoBuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ICommandResponseMessageProtoBuf

// .ChatterCore.Protocols.ICommandResponseMessageProtoBuf.CommandResponseTypeProtoBuf commandResponseType = 3;
inline void ICommandResponseMessageProtoBuf::clear_commandresponsetype() {
  commandresponsetype_ = 0;
}
inline ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf ICommandResponseMessageProtoBuf::_internal_commandresponsetype() const {
  return static_cast< ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf >(commandresponsetype_);
}
inline ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf ICommandResponseMessageProtoBuf::commandresponsetype() const {
  // @@protoc_insertion_point(field_get:ChatterCore.Protocols.ICommandResponseMessageProtoBuf.commandResponseType)
  return _internal_commandresponsetype();
}
inline void ICommandResponseMessageProtoBuf::_internal_set_commandresponsetype(::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf value) {
  
  commandresponsetype_ = value;
}
inline void ICommandResponseMessageProtoBuf::set_commandresponsetype(::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf value) {
  _internal_set_commandresponsetype(value);
  // @@protoc_insertion_point(field_set:ChatterCore.Protocols.ICommandResponseMessageProtoBuf.commandResponseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocols
}  // namespace ChatterCore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf>() {
  return ::ChatterCore::Protocols::ICommandResponseMessageProtoBuf_CommandResponseTypeProtoBuf_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ICommandResponseMessageProtoBuf_2eproto
