// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterCommandMessageProtoBuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RegisterCommandMessageProtoBuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RegisterCommandMessageProtoBuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RegisterCommandMessageProtoBuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RegisterCommandMessageProtoBuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RegisterCommandMessageProtoBuf_2eproto;
namespace ChatterCore {
namespace Protocols {
class RegisterCommandMessageProtoBuf;
class RegisterCommandMessageProtoBufDefaultTypeInternal;
extern RegisterCommandMessageProtoBufDefaultTypeInternal _RegisterCommandMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterCore
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatterCore::Protocols::RegisterCommandMessageProtoBuf* Arena::CreateMaybeMessage<::ChatterCore::Protocols::RegisterCommandMessageProtoBuf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatterCore {
namespace Protocols {

// ===================================================================

class RegisterCommandMessageProtoBuf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatterCore.Protocols.RegisterCommandMessageProtoBuf) */ {
 public:
  RegisterCommandMessageProtoBuf();
  virtual ~RegisterCommandMessageProtoBuf();

  RegisterCommandMessageProtoBuf(const RegisterCommandMessageProtoBuf& from);
  RegisterCommandMessageProtoBuf(RegisterCommandMessageProtoBuf&& from) noexcept
    : RegisterCommandMessageProtoBuf() {
    *this = ::std::move(from);
  }

  inline RegisterCommandMessageProtoBuf& operator=(const RegisterCommandMessageProtoBuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterCommandMessageProtoBuf& operator=(RegisterCommandMessageProtoBuf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterCommandMessageProtoBuf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterCommandMessageProtoBuf* internal_default_instance() {
    return reinterpret_cast<const RegisterCommandMessageProtoBuf*>(
               &_RegisterCommandMessageProtoBuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterCommandMessageProtoBuf& a, RegisterCommandMessageProtoBuf& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterCommandMessageProtoBuf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterCommandMessageProtoBuf* New() const final {
    return CreateMaybeMessage<RegisterCommandMessageProtoBuf>(nullptr);
  }

  RegisterCommandMessageProtoBuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterCommandMessageProtoBuf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterCommandMessageProtoBuf& from);
  void MergeFrom(const RegisterCommandMessageProtoBuf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterCommandMessageProtoBuf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatterCore.Protocols.RegisterCommandMessageProtoBuf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RegisterCommandMessageProtoBuf_2eproto);
    return ::descriptor_table_RegisterCommandMessageProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 4,
    kPasswordFieldNumber = 5,
  };
  // string username = 4;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:ChatterCore.Protocols.RegisterCommandMessageProtoBuf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RegisterCommandMessageProtoBuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterCommandMessageProtoBuf

// string username = 4;
inline void RegisterCommandMessageProtoBuf::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterCommandMessageProtoBuf::username() const {
  // @@protoc_insertion_point(field_get:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
  return _internal_username();
}
inline void RegisterCommandMessageProtoBuf::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
}
inline std::string* RegisterCommandMessageProtoBuf::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
  return _internal_mutable_username();
}
inline const std::string& RegisterCommandMessageProtoBuf::_internal_username() const {
  return username_.GetNoArena();
}
inline void RegisterCommandMessageProtoBuf::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterCommandMessageProtoBuf::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
}
inline void RegisterCommandMessageProtoBuf::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
}
inline void RegisterCommandMessageProtoBuf::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
}
inline std::string* RegisterCommandMessageProtoBuf::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterCommandMessageProtoBuf::release_username() {
  // @@protoc_insertion_point(field_release:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterCommandMessageProtoBuf::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.username)
}

// string password = 5;
inline void RegisterCommandMessageProtoBuf::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterCommandMessageProtoBuf::password() const {
  // @@protoc_insertion_point(field_get:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
  return _internal_password();
}
inline void RegisterCommandMessageProtoBuf::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
}
inline std::string* RegisterCommandMessageProtoBuf::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
  return _internal_mutable_password();
}
inline const std::string& RegisterCommandMessageProtoBuf::_internal_password() const {
  return password_.GetNoArena();
}
inline void RegisterCommandMessageProtoBuf::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterCommandMessageProtoBuf::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
}
inline void RegisterCommandMessageProtoBuf::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
}
inline void RegisterCommandMessageProtoBuf::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
}
inline std::string* RegisterCommandMessageProtoBuf::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterCommandMessageProtoBuf::release_password() {
  // @@protoc_insertion_point(field_release:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterCommandMessageProtoBuf::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ChatterCore.Protocols.RegisterCommandMessageProtoBuf.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocols
}  // namespace ChatterCore

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RegisterCommandMessageProtoBuf_2eproto
