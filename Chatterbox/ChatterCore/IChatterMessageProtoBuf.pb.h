// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IChatterMessageProtoBuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IChatterMessageProtoBuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IChatterMessageProtoBuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TextChatterMessageProtoBuf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IChatterMessageProtoBuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IChatterMessageProtoBuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IChatterMessageProtoBuf_2eproto;
namespace ChatterBoxCore {
namespace Protocols {
class IChatterMessageProtoBuf;
class IChatterMessageProtoBufDefaultTypeInternal;
extern IChatterMessageProtoBufDefaultTypeInternal _IChatterMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterBoxCore
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf* Arena::CreateMaybeMessage<::ChatterBoxCore::Protocols::IChatterMessageProtoBuf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatterBoxCore {
namespace Protocols {

enum IChatterMessageProtoBuf_ChatterTypeProtoBuf : int {
  IChatterMessageProtoBuf_ChatterTypeProtoBuf_TextChatter = 0,
  IChatterMessageProtoBuf_ChatterTypeProtoBuf_AudioChatter = 1,
  IChatterMessageProtoBuf_ChatterTypeProtoBuf_IChatterMessageProtoBuf_ChatterTypeProtoBuf_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IChatterMessageProtoBuf_ChatterTypeProtoBuf_IChatterMessageProtoBuf_ChatterTypeProtoBuf_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IChatterMessageProtoBuf_ChatterTypeProtoBuf_IsValid(int value);
constexpr IChatterMessageProtoBuf_ChatterTypeProtoBuf IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_MIN = IChatterMessageProtoBuf_ChatterTypeProtoBuf_TextChatter;
constexpr IChatterMessageProtoBuf_ChatterTypeProtoBuf IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_MAX = IChatterMessageProtoBuf_ChatterTypeProtoBuf_AudioChatter;
constexpr int IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_ARRAYSIZE = IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IChatterMessageProtoBuf_ChatterTypeProtoBuf_descriptor();
template<typename T>
inline const std::string& IChatterMessageProtoBuf_ChatterTypeProtoBuf_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IChatterMessageProtoBuf_ChatterTypeProtoBuf>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IChatterMessageProtoBuf_ChatterTypeProtoBuf_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_descriptor(), enum_t_value);
}
inline bool IChatterMessageProtoBuf_ChatterTypeProtoBuf_Parse(
    const std::string& name, IChatterMessageProtoBuf_ChatterTypeProtoBuf* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IChatterMessageProtoBuf_ChatterTypeProtoBuf>(
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_descriptor(), name, value);
}
// ===================================================================

class IChatterMessageProtoBuf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatterBoxCore.Protocols.IChatterMessageProtoBuf) */ {
 public:
  IChatterMessageProtoBuf();
  virtual ~IChatterMessageProtoBuf();

  IChatterMessageProtoBuf(const IChatterMessageProtoBuf& from);
  IChatterMessageProtoBuf(IChatterMessageProtoBuf&& from) noexcept
    : IChatterMessageProtoBuf() {
    *this = ::std::move(from);
  }

  inline IChatterMessageProtoBuf& operator=(const IChatterMessageProtoBuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline IChatterMessageProtoBuf& operator=(IChatterMessageProtoBuf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IChatterMessageProtoBuf& default_instance();

  enum ChatterDataCase {
    kTextChatterMessagePB = 9,
    CHATTERDATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IChatterMessageProtoBuf* internal_default_instance() {
    return reinterpret_cast<const IChatterMessageProtoBuf*>(
               &_IChatterMessageProtoBuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IChatterMessageProtoBuf& a, IChatterMessageProtoBuf& b) {
    a.Swap(&b);
  }
  inline void Swap(IChatterMessageProtoBuf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IChatterMessageProtoBuf* New() const final {
    return CreateMaybeMessage<IChatterMessageProtoBuf>(nullptr);
  }

  IChatterMessageProtoBuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IChatterMessageProtoBuf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IChatterMessageProtoBuf& from);
  void MergeFrom(const IChatterMessageProtoBuf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IChatterMessageProtoBuf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatterBoxCore.Protocols.IChatterMessageProtoBuf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IChatterMessageProtoBuf_2eproto);
    return ::descriptor_table_IChatterMessageProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IChatterMessageProtoBuf_ChatterTypeProtoBuf ChatterTypeProtoBuf;
  static constexpr ChatterTypeProtoBuf TextChatter =
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_TextChatter;
  static constexpr ChatterTypeProtoBuf AudioChatter =
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_AudioChatter;
  static inline bool ChatterTypeProtoBuf_IsValid(int value) {
    return IChatterMessageProtoBuf_ChatterTypeProtoBuf_IsValid(value);
  }
  static constexpr ChatterTypeProtoBuf ChatterTypeProtoBuf_MIN =
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_MIN;
  static constexpr ChatterTypeProtoBuf ChatterTypeProtoBuf_MAX =
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_MAX;
  static constexpr int ChatterTypeProtoBuf_ARRAYSIZE =
    IChatterMessageProtoBuf_ChatterTypeProtoBuf_ChatterTypeProtoBuf_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChatterTypeProtoBuf_descriptor() {
    return IChatterMessageProtoBuf_ChatterTypeProtoBuf_descriptor();
  }
  template<typename T>
  static inline const std::string& ChatterTypeProtoBuf_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChatterTypeProtoBuf>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChatterTypeProtoBuf_Name.");
    return IChatterMessageProtoBuf_ChatterTypeProtoBuf_Name(enum_t_value);
  }
  static inline bool ChatterTypeProtoBuf_Parse(const std::string& name,
      ChatterTypeProtoBuf* value) {
    return IChatterMessageProtoBuf_ChatterTypeProtoBuf_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChatterTypeFieldNumber = 3,
    kTextChatterMessagePBFieldNumber = 9,
  };
  // .ChatterBoxCore.Protocols.IChatterMessageProtoBuf.ChatterTypeProtoBuf chatterType = 3;
  void clear_chattertype();
  ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf chattertype() const;
  void set_chattertype(::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf value);
  private:
  ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf _internal_chattertype() const;
  void _internal_set_chattertype(::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf value);
  public:

  // .ChatterBoxCore.Protocols.TextChatterMessageProtoBuf TextChatterMessagePB = 9;
  bool has_textchattermessagepb() const;
  private:
  bool _internal_has_textchattermessagepb() const;
  public:
  void clear_textchattermessagepb();
  const ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf& textchattermessagepb() const;
  ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* release_textchattermessagepb();
  ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* mutable_textchattermessagepb();
  void set_allocated_textchattermessagepb(::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* textchattermessagepb);
  private:
  const ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf& _internal_textchattermessagepb() const;
  ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* _internal_mutable_textchattermessagepb();
  public:

  void clear_ChatterData();
  ChatterDataCase ChatterData_case() const;
  // @@protoc_insertion_point(class_scope:ChatterBoxCore.Protocols.IChatterMessageProtoBuf)
 private:
  class _Internal;
  void set_has_textchattermessagepb();

  inline bool has_ChatterData() const;
  inline void clear_has_ChatterData();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int chattertype_;
  union ChatterDataUnion {
    ChatterDataUnion() {}
    ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* textchattermessagepb_;
  } ChatterData_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IChatterMessageProtoBuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IChatterMessageProtoBuf

// .ChatterBoxCore.Protocols.IChatterMessageProtoBuf.ChatterTypeProtoBuf chatterType = 3;
inline void IChatterMessageProtoBuf::clear_chattertype() {
  chattertype_ = 0;
}
inline ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf IChatterMessageProtoBuf::_internal_chattertype() const {
  return static_cast< ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf >(chattertype_);
}
inline ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf IChatterMessageProtoBuf::chattertype() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.IChatterMessageProtoBuf.chatterType)
  return _internal_chattertype();
}
inline void IChatterMessageProtoBuf::_internal_set_chattertype(::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf value) {
  
  chattertype_ = value;
}
inline void IChatterMessageProtoBuf::set_chattertype(::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf value) {
  _internal_set_chattertype(value);
  // @@protoc_insertion_point(field_set:ChatterBoxCore.Protocols.IChatterMessageProtoBuf.chatterType)
}

// .ChatterBoxCore.Protocols.TextChatterMessageProtoBuf TextChatterMessagePB = 9;
inline bool IChatterMessageProtoBuf::_internal_has_textchattermessagepb() const {
  return ChatterData_case() == kTextChatterMessagePB;
}
inline bool IChatterMessageProtoBuf::has_textchattermessagepb() const {
  return _internal_has_textchattermessagepb();
}
inline void IChatterMessageProtoBuf::set_has_textchattermessagepb() {
  _oneof_case_[0] = kTextChatterMessagePB;
}
inline ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* IChatterMessageProtoBuf::release_textchattermessagepb() {
  // @@protoc_insertion_point(field_release:ChatterBoxCore.Protocols.IChatterMessageProtoBuf.TextChatterMessagePB)
  if (_internal_has_textchattermessagepb()) {
    clear_has_ChatterData();
      ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* temp = ChatterData_.textchattermessagepb_;
    ChatterData_.textchattermessagepb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf& IChatterMessageProtoBuf::_internal_textchattermessagepb() const {
  return _internal_has_textchattermessagepb()
      ? *ChatterData_.textchattermessagepb_
      : *reinterpret_cast< ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf*>(&::ChatterBoxCore::Protocols::_TextChatterMessageProtoBuf_default_instance_);
}
inline const ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf& IChatterMessageProtoBuf::textchattermessagepb() const {
  // @@protoc_insertion_point(field_get:ChatterBoxCore.Protocols.IChatterMessageProtoBuf.TextChatterMessagePB)
  return _internal_textchattermessagepb();
}
inline ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* IChatterMessageProtoBuf::_internal_mutable_textchattermessagepb() {
  if (!_internal_has_textchattermessagepb()) {
    clear_ChatterData();
    set_has_textchattermessagepb();
    ChatterData_.textchattermessagepb_ = CreateMaybeMessage< ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf >(
        GetArenaNoVirtual());
  }
  return ChatterData_.textchattermessagepb_;
}
inline ::ChatterBoxCore::Protocols::TextChatterMessageProtoBuf* IChatterMessageProtoBuf::mutable_textchattermessagepb() {
  // @@protoc_insertion_point(field_mutable:ChatterBoxCore.Protocols.IChatterMessageProtoBuf.TextChatterMessagePB)
  return _internal_mutable_textchattermessagepb();
}

inline bool IChatterMessageProtoBuf::has_ChatterData() const {
  return ChatterData_case() != CHATTERDATA_NOT_SET;
}
inline void IChatterMessageProtoBuf::clear_has_ChatterData() {
  _oneof_case_[0] = CHATTERDATA_NOT_SET;
}
inline IChatterMessageProtoBuf::ChatterDataCase IChatterMessageProtoBuf::ChatterData_case() const {
  return IChatterMessageProtoBuf::ChatterDataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocols
}  // namespace ChatterBoxCore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf>() {
  return ::ChatterBoxCore::Protocols::IChatterMessageProtoBuf_ChatterTypeProtoBuf_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IChatterMessageProtoBuf_2eproto
