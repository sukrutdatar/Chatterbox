// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterCommandResponseMessageProtoBuf.proto

#include "RegisterCommandResponseMessageProtoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ChatterBoxCore {
namespace Protocols {
class RegisterCommandResponseMessageProtoBufDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterCommandResponseMessageProtoBuf> _instance;
} _RegisterCommandResponseMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterBoxCore
static void InitDefaultsscc_info_RegisterCommandResponseMessageProtoBuf_RegisterCommandResponseMessageProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatterBoxCore::Protocols::_RegisterCommandResponseMessageProtoBuf_default_instance_;
    new (ptr) ::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterCommandResponseMessageProtoBuf_RegisterCommandResponseMessageProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterCommandResponseMessageProtoBuf_RegisterCommandResponseMessageProtoBuf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RegisterCommandResponseMessageProtoBuf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RegisterCommandResponseMessageProtoBuf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RegisterCommandResponseMessageProtoBuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RegisterCommandResponseMessageProtoBuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf, recoverykey_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatterBoxCore::Protocols::_RegisterCommandResponseMessageProtoBuf_default_instance_),
};

const char descriptor_table_protodef_RegisterCommandResponseMessageProtoBuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,RegisterCommandResponseMessageProtoBuf"
  ".proto\022\030ChatterBoxCore.Protocols\"=\n&Regi"
  "sterCommandResponseMessageProtoBuf\022\023\n\013re"
  "coveryKey\030\006 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_sccs[1] = {
  &scc_info_RegisterCommandResponseMessageProtoBuf_RegisterCommandResponseMessageProtoBuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_once;
static bool descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto = {
  &descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_initialized, descriptor_table_protodef_RegisterCommandResponseMessageProtoBuf_2eproto, "RegisterCommandResponseMessageProtoBuf.proto", 143,
  &descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_once, descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_sccs, descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_RegisterCommandResponseMessageProtoBuf_2eproto::offsets,
  file_level_metadata_RegisterCommandResponseMessageProtoBuf_2eproto, 1, file_level_enum_descriptors_RegisterCommandResponseMessageProtoBuf_2eproto, file_level_service_descriptors_RegisterCommandResponseMessageProtoBuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RegisterCommandResponseMessageProtoBuf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RegisterCommandResponseMessageProtoBuf_2eproto), true);
namespace ChatterBoxCore {
namespace Protocols {

// ===================================================================

void RegisterCommandResponseMessageProtoBuf::InitAsDefaultInstance() {
}
class RegisterCommandResponseMessageProtoBuf::_Internal {
 public:
};

RegisterCommandResponseMessageProtoBuf::RegisterCommandResponseMessageProtoBuf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
}
RegisterCommandResponseMessageProtoBuf::RegisterCommandResponseMessageProtoBuf(const RegisterCommandResponseMessageProtoBuf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recoverykey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recoverykey().empty()) {
    recoverykey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recoverykey_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
}

void RegisterCommandResponseMessageProtoBuf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterCommandResponseMessageProtoBuf_RegisterCommandResponseMessageProtoBuf_2eproto.base);
  recoverykey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterCommandResponseMessageProtoBuf::~RegisterCommandResponseMessageProtoBuf() {
  // @@protoc_insertion_point(destructor:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  SharedDtor();
}

void RegisterCommandResponseMessageProtoBuf::SharedDtor() {
  recoverykey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterCommandResponseMessageProtoBuf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterCommandResponseMessageProtoBuf& RegisterCommandResponseMessageProtoBuf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterCommandResponseMessageProtoBuf_RegisterCommandResponseMessageProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void RegisterCommandResponseMessageProtoBuf::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recoverykey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterCommandResponseMessageProtoBuf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string recoveryKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_recoverykey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf.recoveryKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterCommandResponseMessageProtoBuf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string recoveryKey = 6;
  if (this->recoverykey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recoverykey().data(), static_cast<int>(this->_internal_recoverykey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf.recoveryKey");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_recoverykey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  return target;
}

size_t RegisterCommandResponseMessageProtoBuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recoveryKey = 6;
  if (this->recoverykey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recoverykey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterCommandResponseMessageProtoBuf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterCommandResponseMessageProtoBuf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterCommandResponseMessageProtoBuf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
    MergeFrom(*source);
  }
}

void RegisterCommandResponseMessageProtoBuf::MergeFrom(const RegisterCommandResponseMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recoverykey().size() > 0) {

    recoverykey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recoverykey_);
  }
}

void RegisterCommandResponseMessageProtoBuf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterCommandResponseMessageProtoBuf::CopyFrom(const RegisterCommandResponseMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatterBoxCore.Protocols.RegisterCommandResponseMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterCommandResponseMessageProtoBuf::IsInitialized() const {
  return true;
}

void RegisterCommandResponseMessageProtoBuf::InternalSwap(RegisterCommandResponseMessageProtoBuf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recoverykey_.Swap(&other->recoverykey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterCommandResponseMessageProtoBuf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocols
}  // namespace ChatterBoxCore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf* Arena::CreateMaybeMessage< ::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf >(Arena* arena) {
  return Arena::CreateInternal< ::ChatterBoxCore::Protocols::RegisterCommandResponseMessageProtoBuf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
