// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ICommandMessageProtoBuf.proto

#include "ICommandMessageProtoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ChatterCore {
namespace Protocols {
class ICommandMessageProtoBufDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ICommandMessageProtoBuf> _instance;
} _ICommandMessageProtoBuf_default_instance_;
}  // namespace Protocols
}  // namespace ChatterCore
static void InitDefaultsscc_info_ICommandMessageProtoBuf_ICommandMessageProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatterCore::Protocols::_ICommandMessageProtoBuf_default_instance_;
    new (ptr) ::ChatterCore::Protocols::ICommandMessageProtoBuf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatterCore::Protocols::ICommandMessageProtoBuf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ICommandMessageProtoBuf_ICommandMessageProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ICommandMessageProtoBuf_ICommandMessageProtoBuf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ICommandMessageProtoBuf_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ICommandMessageProtoBuf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ICommandMessageProtoBuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ICommandMessageProtoBuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatterCore::Protocols::ICommandMessageProtoBuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatterCore::Protocols::ICommandMessageProtoBuf, commandtype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatterCore::Protocols::ICommandMessageProtoBuf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatterCore::Protocols::_ICommandMessageProtoBuf_default_instance_),
};

const char descriptor_table_protodef_ICommandMessageProtoBuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035ICommandMessageProtoBuf.proto\022\025Chatter"
  "Core.Protocols\"\352\001\n\027ICommandMessageProtoB"
  "uf\022W\n\013commandType\030\003 \001(\0162B.ChatterCore.Pr"
  "otocols.ICommandMessageProtoBuf.CommandT"
  "ypeProtoBuf\"v\n\023CommandTypeProtoBuf\022\020\n\014Lo"
  "ginCommand\020\000\022\021\n\rLogoutCommand\020\001\022\024\n\020ListU"
  "sersCommand\020\002\022\023\n\017RegisterCommand\020\003\022\017\n\013Ch"
  "atCommand\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ICommandMessageProtoBuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ICommandMessageProtoBuf_2eproto_sccs[1] = {
  &scc_info_ICommandMessageProtoBuf_ICommandMessageProtoBuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ICommandMessageProtoBuf_2eproto_once;
static bool descriptor_table_ICommandMessageProtoBuf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ICommandMessageProtoBuf_2eproto = {
  &descriptor_table_ICommandMessageProtoBuf_2eproto_initialized, descriptor_table_protodef_ICommandMessageProtoBuf_2eproto, "ICommandMessageProtoBuf.proto", 299,
  &descriptor_table_ICommandMessageProtoBuf_2eproto_once, descriptor_table_ICommandMessageProtoBuf_2eproto_sccs, descriptor_table_ICommandMessageProtoBuf_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ICommandMessageProtoBuf_2eproto::offsets,
  file_level_metadata_ICommandMessageProtoBuf_2eproto, 1, file_level_enum_descriptors_ICommandMessageProtoBuf_2eproto, file_level_service_descriptors_ICommandMessageProtoBuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ICommandMessageProtoBuf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ICommandMessageProtoBuf_2eproto), true);
namespace ChatterCore {
namespace Protocols {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ICommandMessageProtoBuf_CommandTypeProtoBuf_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ICommandMessageProtoBuf_2eproto);
  return file_level_enum_descriptors_ICommandMessageProtoBuf_2eproto[0];
}
bool ICommandMessageProtoBuf_CommandTypeProtoBuf_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::LoginCommand;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::LogoutCommand;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::ListUsersCommand;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::RegisterCommand;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::ChatCommand;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::CommandTypeProtoBuf_MIN;
constexpr ICommandMessageProtoBuf_CommandTypeProtoBuf ICommandMessageProtoBuf::CommandTypeProtoBuf_MAX;
constexpr int ICommandMessageProtoBuf::CommandTypeProtoBuf_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ICommandMessageProtoBuf::InitAsDefaultInstance() {
}
class ICommandMessageProtoBuf::_Internal {
 public:
};

ICommandMessageProtoBuf::ICommandMessageProtoBuf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatterCore.Protocols.ICommandMessageProtoBuf)
}
ICommandMessageProtoBuf::ICommandMessageProtoBuf(const ICommandMessageProtoBuf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commandtype_ = from.commandtype_;
  // @@protoc_insertion_point(copy_constructor:ChatterCore.Protocols.ICommandMessageProtoBuf)
}

void ICommandMessageProtoBuf::SharedCtor() {
  commandtype_ = 0;
}

ICommandMessageProtoBuf::~ICommandMessageProtoBuf() {
  // @@protoc_insertion_point(destructor:ChatterCore.Protocols.ICommandMessageProtoBuf)
  SharedDtor();
}

void ICommandMessageProtoBuf::SharedDtor() {
}

void ICommandMessageProtoBuf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ICommandMessageProtoBuf& ICommandMessageProtoBuf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ICommandMessageProtoBuf_ICommandMessageProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void ICommandMessageProtoBuf::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commandtype_ = 0;
  _internal_metadata_.Clear();
}

const char* ICommandMessageProtoBuf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatterCore.Protocols.ICommandMessageProtoBuf.CommandTypeProtoBuf commandType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_commandtype(static_cast<::ChatterCore::Protocols::ICommandMessageProtoBuf_CommandTypeProtoBuf>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ICommandMessageProtoBuf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatterCore.Protocols.ICommandMessageProtoBuf.CommandTypeProtoBuf commandType = 3;
  if (this->commandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_commandtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatterCore.Protocols.ICommandMessageProtoBuf)
  return target;
}

size_t ICommandMessageProtoBuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatterCore.Protocols.ICommandMessageProtoBuf.CommandTypeProtoBuf commandType = 3;
  if (this->commandtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commandtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ICommandMessageProtoBuf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  const ICommandMessageProtoBuf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ICommandMessageProtoBuf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatterCore.Protocols.ICommandMessageProtoBuf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatterCore.Protocols.ICommandMessageProtoBuf)
    MergeFrom(*source);
  }
}

void ICommandMessageProtoBuf::MergeFrom(const ICommandMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commandtype() != 0) {
    _internal_set_commandtype(from._internal_commandtype());
  }
}

void ICommandMessageProtoBuf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICommandMessageProtoBuf::CopyFrom(const ICommandMessageProtoBuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatterCore.Protocols.ICommandMessageProtoBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICommandMessageProtoBuf::IsInitialized() const {
  return true;
}

void ICommandMessageProtoBuf::InternalSwap(ICommandMessageProtoBuf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(commandtype_, other->commandtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ICommandMessageProtoBuf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocols
}  // namespace ChatterCore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatterCore::Protocols::ICommandMessageProtoBuf* Arena::CreateMaybeMessage< ::ChatterCore::Protocols::ICommandMessageProtoBuf >(Arena* arena) {
  return Arena::CreateInternal< ::ChatterCore::Protocols::ICommandMessageProtoBuf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
